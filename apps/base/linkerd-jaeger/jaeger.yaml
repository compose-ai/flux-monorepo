---
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-jaeger
  labels:
    linkerd.io/extension: jaeger
    pod-security.kubernetes.io/enforce: privileged
---
###
### Jaeger Injector
###
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.13.5
    component: jaeger-injector
  name: jaeger-injector
  namespace: linkerd-jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  template:
    metadata:
      annotations:
        checksum/config: fd0621a767180ab05694ebab2fb3b5cbfc9960d2d51f80ba33d16612b14a3ee8
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: jaeger-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -collector-svc-addr=jaeger-collector.jaeger.svc.cluster.local:14250
        - -collector-svc-account=collector
        - -log-level=info
        - -cluster-domain=cluster.local
        - -linkerd-namespace=linkerd
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/jaeger-webhook:stable-2.13.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: jaeger-injector
        ports:
        - containerPort: 8443
          name: jaeger-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
        resources:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jaeger-injector
      volumes:
      - name: tls
        secret:
          secretName: jaeger-injector-k8s-tls
---
kind: Service
apiVersion: v1
metadata:
  name: jaeger-injector
  namespace: linkerd-jaeger
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  ports:
  - name: jaeger-injector
    port: 443
    targetPort: jaeger-injector
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: jaeger-injector-webhook
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  port: jaeger-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger
  name: jaeger-injector
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-jaeger
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  # Ideally, this should be restricted to the actual set of IPs the kube-api
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### collector RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: collector
  namespace: linkerd-jaeger
---
###
### Jaeger Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
subjects:
- kind: ServiceAccount
  name: jaeger-injector
  namespace: linkerd-jaeger
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-jaeger-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger-injector
  namespace: linkerd-jaeger
---
kind: Secret
apiVersion: v1
metadata:
  name: jaeger-injector-k8s-tls
  namespace: linkerd-jaeger
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQVBtS0xPaVFFOWNsV2szY29SckJEQVV3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWFtRmxaMlZ5TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF0YW1GbFoyVnlMbk4yWXpBZQpGdzB5TXpBNE1UQXdNVFU0TVROYUZ3MHlOREE0TURrd01UVTRNVE5hTUMweEt6QXBCZ05WQkFNVEltcGhaV2RsCmNpMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xXcGhaV2RsY2k1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRREM4UzJDSUtnZkVoYnRMRGRtYml6ZXhxNWwrQW1mODNpZGJaTFMzak8reEp2RApHYnhoOWFEMERJZmx4VmlYQ01NUlFENkEvRDliWWJSdUtnNjdyQzdoelNraG0wamV3cnpKRmhVTnBXR21SeFltCjFXV1FjSklSbjZGNWsxcHNLOU5EWlRGbmZnR0J0Rm1tMFM1Tjl5ZHJ1LzFXMlVSWEt6a3d3Y1RVd1RLZGljSFQKUUExN0hpQ1VrVG1Bc0JIVlYxdGZSQlZpQXpwZzlPVUpGWGY2UDVLMlB1MGR4Ry90eDlvUTZ2SnA3VGJSaWMvUQpoRGRxS3JUbUM0WVJKWWRIaGt4c1ZOS1pOMDdkazJHU0ZVaWQyRGNaSlBrQ2hPRWpGczBIbHdjaG9nc09sckZlCnVpZk5wUFkwdkJEQkZBNE1USU5PTktrb1Bzd0sybU0xc3JtSjNWZU5BZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnFZV1ZuWlhJdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkMxcVlXVm5aWEl1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUF1RndkaG9rNks1ZVJmaHpTS01mMjFTOEJLdG5SbUZwQncKeEMxcEp4TUtmY2pyODNCZWNmUzNpMVhmdE9Id1JwNE5aRHBiWXA3Y0t0RnRMcjJPUm85ZkF5K0p1YnkrRHVQRwowNGR3eDd6RzM2dDU3cmpnalNLY0ZpRzdNMjZ5T1FPUC9RTjg5VzB4NFBXWEFGUFM0bmtzdXBkN1JRTnk4WVFNClpqTGxscmF0Y3lEK3RZZytSNDlkSUJZUXFvb3I5d2NHQnc3UElGQjdZaS9MNTBSak1jTGpkdFdWRWRJUXV2VzgKckl1L0RqaGp1eHFiakJpNjgrZml6OVp0VWdGakl6R3J0dHF0NlA2SUIweFI2Z0JJTzFFNGRab3p0ZlN0NnJONApPVVQ1di9VbUVlVE9nWTlHbll4QURwYmxsb1VPT1hLSjNheTJ5R2dVMnpwNXBVZlpzenhuCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd3ZFdGdpQ29IeElXN1N3M1ptNHMzc2F1WmZnSm4vTjRuVzJTMHQ0enZzU2J3eG04CllmV2c5QXlINWNWWWx3akRFVUErZ1B3L1cyRzBiaW9PdTZ3dTRjMHBJWnRJM3NLOHlSWVZEYVZocGtjV0p0VmwKa0hDU0VaK2hlWk5hYkN2VFEyVXhaMzRCZ2JSWnB0RXVUZmNuYTd2OVZ0bEVWeXM1TU1IRTFNRXluWW5CMDBBTgpleDRnbEpFNWdMQVIxVmRiWDBRVllnTTZZUFRsQ1JWMytqK1N0ajd0SGNSdjdjZmFFT3J5YWUwMjBZblAwSVEzCmFpcTA1Z3VHRVNXSFI0Wk1iRlRTbVRkTzNaTmhraFZJbmRnM0dTVDVBb1RoSXhiTkI1Y0hJYUlMRHBheFhyb24KemFUMk5Md1F3UlFPREV5RFRqU3BLRDdNQ3Rwak5iSzVpZDFYalFJREFRQUJBb0lCQUZoNWZWNEIxRXZGdWdJSwpmMXBOeHErVkhMSEswUk4zUE5hMlZGeS8zRnhJZnlrZEZSS2dtRndyRThLRXZxQk5xYnE2bmFPTTJIUnc4NkxNCkU4TzVjYzJwZjNGeE9MRmhVSzB6Q0hzWkJDaWpPcnFGUDRNK2xBekxsazNIUXRLMVVUelZRSWJuK1djVW8xdkMKdEhGT0t1WUtmQUJldTFXVW1IQTRnVXpPSWxxODBCb2l3VXd2VytBNGdQTzlUVmVQa3lVbzdsN0hZZ0VkNXh1OApyd21TZkVqNVZqRmtaaTc4emViOWRMN1djVmlWcUJLSytsd2hyeUw4cGphYXU2WWdlcUhkelpRZW1nR1RjMkMrCkpaRXZvcFk3dzliRjFmQmVYMGtxeEt3amhMNFh0bGJzRXY2V3lFS2grYnVhQWZDSnZ0VDRuRzhOL3MvL2NPeEgKNVAxZ3pnRUNnWUVBMnhtaFh2bFhMaVBIbERjS3VJcnR2ZFM2aHhRQ1FxR29ac2VhTjViYmU3TWg1Vk5oK29yQwpLb3BiVVpJSnVCSnBncWJXK01HYW8vbTFBaE5TMnBMNjJuUTVwQ2FzL3Q1aUNMZHh0VUFuSHdWMVU4Q2xXc1BpCmNDdUVXc2creTdwSWFzZm40RnM3YWhLTmNGUGVkRVBVQkRZb1ZXQjhMK2x2SnRERCsrY2JTMmtDZ1lFQTQ4WDkKTUdBSWJVZTJmbng1cjVlT1NwbVUwVTFuUjBVRHRsdWRDUG5CWitMWFcyektGbm4rYWZOQXdoQWRlQUhhd01SdgpUWGhDMmpaMkcvNWRtbUh6OVprbkIzV2FUWVE5c3IzWVE0QTJPY1BVVTdaS2pYcTFpVVpNSGNMd2gxWkRvbENSCnZ3WVczUVpxSmVNT1BMMDNPbU55eFMrajYxU0dGTVZqNjNLQ21vVUNnWUI0SzJtWHRyZzdSVUtNcDFmSStlSUYKY1N6Uk00YzkxbjZQeU1CcjV1RUF5ckkzbm5FcHdudFdhOFpFU2czc21LU29GU3ZwQ2Y3d0d1Qk5nQjI4WmtzUwpFQmNoVWxrbC9RRFYrUTl6c3ZrQ0NiTmRPVmM0SGlJUEZiOGxMNWxKa2lWdjg2N1pIaERMVDl1bGxVcDRpRTg3CjlCeFJIM2RkcS9IYjN6cnU2Y1hOcVFLQmdRRFRObkdHUGtjU0x3SEhZTjNtT2YrMHBaNGVTRXlSQmlwZkc2ME8KK2FxakR2THMwSURGUHZMd2hLVjBUMFZFVjFQbWxVRXc4V2ZzdWJ2a1VZZXk5VW9vWUpDVWxqVXoxSUR5RXFGTQpWc1B4NU9vcmhrcXp6eW92MVlRWHhRRU9QcXdSQSsxaTJkNnhycFVYOU9qcTRmc29wYmR6cXEyeU4zcnVIK3g4CkZIK1BrUUtCZ0VPaHpRa1R3dFlQeThFeUVyU2V6WForSGNQdkZodnYzWForbGx0VUtlaHl5a2U0WkFuYXJEMFoKQ255T1Y1VFlPZDhYV1FrMzQ3ZWRydFRqY2hMZy9SSjZIYjhueTlrQ2RyZUJ6SU54VVJGQTRPYnVObE5oTnhQQQpMRisrd1JXbnYvSHlyaCtVK2V4TWtvdU5FOEd6S3JIVk55akJNZFFPd2prZnh3b3BUYU1nCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-jaeger-injector-webhook-config
  labels:
    linkerd.io/extension: jaeger
webhooks:
- name: jaeger-injector.linkerd.io
  clientConfig:
    service:
      name: jaeger-injector
      namespace: linkerd-jaeger
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQVBtS0xPaVFFOWNsV2szY29SckJEQVV3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWFtRmxaMlZ5TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF0YW1GbFoyVnlMbk4yWXpBZQpGdzB5TXpBNE1UQXdNVFU0TVROYUZ3MHlOREE0TURrd01UVTRNVE5hTUMweEt6QXBCZ05WQkFNVEltcGhaV2RsCmNpMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xXcGhaV2RsY2k1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRREM4UzJDSUtnZkVoYnRMRGRtYml6ZXhxNWwrQW1mODNpZGJaTFMzak8reEp2RApHYnhoOWFEMERJZmx4VmlYQ01NUlFENkEvRDliWWJSdUtnNjdyQzdoelNraG0wamV3cnpKRmhVTnBXR21SeFltCjFXV1FjSklSbjZGNWsxcHNLOU5EWlRGbmZnR0J0Rm1tMFM1Tjl5ZHJ1LzFXMlVSWEt6a3d3Y1RVd1RLZGljSFQKUUExN0hpQ1VrVG1Bc0JIVlYxdGZSQlZpQXpwZzlPVUpGWGY2UDVLMlB1MGR4Ry90eDlvUTZ2SnA3VGJSaWMvUQpoRGRxS3JUbUM0WVJKWWRIaGt4c1ZOS1pOMDdkazJHU0ZVaWQyRGNaSlBrQ2hPRWpGczBIbHdjaG9nc09sckZlCnVpZk5wUFkwdkJEQkZBNE1USU5PTktrb1Bzd0sybU0xc3JtSjNWZU5BZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnFZV1ZuWlhJdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkMxcVlXVm5aWEl1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUF1RndkaG9rNks1ZVJmaHpTS01mMjFTOEJLdG5SbUZwQncKeEMxcEp4TUtmY2pyODNCZWNmUzNpMVhmdE9Id1JwNE5aRHBiWXA3Y0t0RnRMcjJPUm85ZkF5K0p1YnkrRHVQRwowNGR3eDd6RzM2dDU3cmpnalNLY0ZpRzdNMjZ5T1FPUC9RTjg5VzB4NFBXWEFGUFM0bmtzdXBkN1JRTnk4WVFNClpqTGxscmF0Y3lEK3RZZytSNDlkSUJZUXFvb3I5d2NHQnc3UElGQjdZaS9MNTBSak1jTGpkdFdWRWRJUXV2VzgKckl1L0RqaGp1eHFiakJpNjgrZml6OVp0VWdGakl6R3J0dHF0NlA2SUIweFI2Z0JJTzFFNGRab3p0ZlN0NnJONApPVVQ1di9VbUVlVE9nWTlHbll4QURwYmxsb1VPT1hLSjNheTJ5R2dVMnpwNXBVZlpzenhuCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tracing Collector Service
###
apiVersion: v1
kind: ConfigMap
metadata:
  name: collector-config
  namespace: linkerd-jaeger
  labels:
    linkerd.io/extension: jaeger
    component: collector
data:
  collector-config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      opencensus:
      zipkin:
      jaeger:
        protocols:
          grpc:
          thrift_http:
          thrift_compact:
          thrift_binary:
    processors:
      batch:
    extensions:
      health_check:
    exporters:
      jaeger:
        endpoint: jaeger-collector.jaeger.svc.cluster.local:14250
        tls:
          insecure: true
    service:
      extensions: [health_check]
      pipelines:
        traces:
          receivers: [otlp,opencensus,zipkin,jaeger]
          processors: [batch]
          exporters: [jaeger]
---
apiVersion: v1
kind: Service
metadata:
  name: collector
  namespace: linkerd-jaeger
  labels:
    linkerd.io/extension: jaeger
    component: collector
spec:
  type: ClusterIP
  ports:
  - name: otlp
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: otlp-http
    port: 4318
    protocol: TCP
    targetPort: 4318
  - name: opencensus
    port: 55678
    protocol: TCP
    targetPort: 55678
  - name: zipkin
    port: 9411
    protocol: TCP
    targetPort: 9411
  - name: jaeger-thrift
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: jaeger-grpc
    port: 14250
    protocol: TCP
    targetPort: 14250
  selector:
    component: collector
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: collector
    app.kubernetes.io/part-of: Linkerd
    component: collector
  name: collector
  namespace: linkerd-jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      component: collector
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        prometheus.io/path: /metrics
        prometheus.io/port: "8888"
        prometheus.io/scrape: "true"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: collector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - command:
        - /otelcol
        - --config=/conf/collector-config.yaml
        env:
        - name: GOGC
          value: "80"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: otel/opentelemetry-collector:0.59.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /
            port: 13133
        name: ot-collector
        ports:
        - containerPort: 13133
        - containerPort: 4317
        - containerPort: 4318
        - containerPort: 55678
        - containerPort: 9411
        - containerPort: 14268
        - containerPort: 14250
        - containerPort: 8888
        readinessProbe:
          httpGet:
            path: /
            port: 13133
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /conf
          name: collector-config-val
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: collector
      volumes:
      - configMap:
          items:
          - key: collector-config
            path: collector-config.yaml
          name: collector-config
        name: collector-config-val
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-otlp
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 4317
  proxyProtocol: gRPC
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-otlp-http
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 4318
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-opencensus
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 55678
  proxyProtocol: gRPC
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-zipkin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 9411
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-jaeger-thrift
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14268
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14250
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-admin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 13133
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger
  name: collector-otlp
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-otlp
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger
  name: collector-otlp-http
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-otlp-http
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger
  name: collector-opencensus
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-opencensus
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger
  name: collector-zipkin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-zipkin
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger
  name: collector-jaeger-thrift
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-jaeger-thrift
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger
  name: collector-jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-jaeger-grpc
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: grpc
  proxyProtocol: gRPC
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-grpc
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: collector
      namespace: linkerd-jaeger
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-admin
  requiredAuthenticationRefs:
    # if not using linkerd-viz' prometheus, replace its SA here
    - kind: ServiceAccount
      name: prometheus
      namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: ui
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-ui
  requiredAuthenticationRefs:
    # for the optional dashboard integration
    - kind: ServiceAccount
      name: web
      namespace: linkerd-viz
