---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: posthog
  namespace: posthog
spec:
  interval: 5m0s
  url: https://compose-ai.github.io/charts-clickhouse/
---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: prometheus-community
  namespace: posthog
spec:
  interval: 5m0s
  url: https://prometheus-community.github.io/helm-charts
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: prometheus-kafka-exporter
  namespace: posthog
spec:
  interval: 60m
  chart:
    spec:
      chart: prometheus-kafka-exporter
      version: "2.7.0"
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
      interval: 12h
  # https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus-kafka-exporter/values.yaml
  # https://github.com/compose-ai/charts-clickhouse/blob/main/charts/posthog/values.yaml
  values:
    nodeSelector:
      cloud.google.com/gke-nodepool: posthog
    tolerations:
      - key: "posthog"
        operator: "Exists"
        effect: "NoSchedule"

    # -- Specify the target Kafka brokers to monitor.
    kafkaServer:
      - posthog-posthog-kafka:9092
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: kafka-podmonitor
  namespace: posthog
  labels:
    app.kubernetes.io/part-of: compose
spec:
  podMetricsEndpoints:
    - path: /metrics
      targetPort: 9308
  namespaceSelector:
    matchNames:
      - posthog
  selector:
    matchExpressions:
      - key: app
        operator: In
        values:
          - prometheus-kafka-exporter
      - key: compose.ai/ignore-monitoring
        operator: DoesNotExist
        values:
          - "ignore"
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: prometheus-postgres-exporter
  namespace: posthog
spec:
  interval: 60m
  chart:
    spec:
      chart: prometheus-postgres-exporter
      version: "5.2.0"
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
      interval: 12h
  # https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus-postgres-exporter/values.yaml
  # https://github.com/compose-ai/charts-clickhouse/blob/main/charts/posthog/values.yaml
  values:
    nodeSelector:
      cloud.google.com/gke-nodepool: posthog
    tolerations:
      - key: "posthog"
        operator: "Exists"
        effect: "NoSchedule"

    # -- Configuration options.
    config:
      datasource:
        host: posthog-posthog-postgresql
        user: postgres
        passwordSecret:
          name: posthog-posthog-postgresql
          key: postgresql-password
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: postgres-podmonitor
  namespace: posthog
  labels:
    app.kubernetes.io/part-of: compose
spec:
  podMetricsEndpoints:
    - path: /metrics
      targetPort: 9187
  namespaceSelector:
    matchNames:
      - posthog
  selector:
    matchExpressions:
      - key: app
        operator: In
        values:
          - prometheus-postgres-exporter
      - key: compose.ai/ignore-monitoring
        operator: DoesNotExist
        values:
          - "ignore"
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: prometheus-redis-exporter
  namespace: posthog
spec:
  interval: 60m
  chart:
    spec:
      chart: prometheus-redis-exporter
      version: "6.0.1"
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
      interval: 12h
  # https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus-redis-exporter/values.yaml
  # https://github.com/compose-ai/charts-clickhouse/blob/main/charts/posthog/values.yaml
  values:
    nodeSelector:
      cloud.google.com/gke-nodepool: posthog
    tolerations:
      - key: "posthog"
        operator: "Exists"
        effect: "NoSchedule"

    # -- Specify the target Redis instance to monitor.
    redisAddress: redis://posthog-posthog-redis-master:6379
    env:
      - name: REDIS_EXPORTER_INCL_SYSTEM_METRICS
        value: "true"
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: redis-podmonitor
  namespace: posthog
  labels:
    app.kubernetes.io/part-of: compose
spec:
  podMetricsEndpoints:
    - path: /metrics
      targetPort: 9121
  namespaceSelector:
    matchNames:
      - posthog
  selector:
    matchExpressions:
      - key: app.kubernetes.io/name
        operator: In
        values:
          - prometheus-redis-exporter
      - key: compose.ai/ignore-monitoring
        operator: DoesNotExist
        values:
          - "ignore"
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: posthog
  namespace: posthog
spec:
  interval: 60m
  chart:
    spec:
      chart: posthog
      version: "30.33.2"
      sourceRef:
        kind: HelmRepository
        name: posthog
      interval: 12h
  # https://github.com/compose-ai/charts-clickhouse/blob/main/charts/posthog/values.yaml
  values:
    # -- Cloud service being deployed on (example: `aws`, `azure`, `do`, `gcp`, `other`).
    cloud: "gcp"
    
    # -- Notification email for notifications to be sent to from the PostHog stack
    notificationEmail: "robot@compose.ai"
    
    # -- Site url specifies the canonical URL root the site can be accessed using.
    # This is used to e.g. generate shareable links to Dashboards.
    siteUrl: "posthog.ops.cluster.compose.ai"

    _pgbouncer:
      hpa:
        enabled: true
      exporter:
        enabled: true

    events:
      hpa:
        # -- Whether to create a HorizontalPodAutoscaler for the events stack.
        enabled: true

    decide:
      # -- Whether to install the PostHog decide stack or not.
      # Default is already disabled, but keeping this here because it seems likely we may want it
      enabled: false

    worker:
      hpa:
        # -- Whether to create a HorizontalPodAutoscaler for the worker stack.
        enabled: true

    plugins:
      # -- Whether to install the PostHog plugin-server stack or not.
      # This service handles data ingestion into ClickHouse, running apps and async
      # jobs. To scale these components separately, instead use the individual
      # component deployments, pluginsIngestion, pluginsAsync, pluginsJobs, and
      # pluginsScheduler.
      hpa:
        # -- Whether to create a HorizontalPodAutoscaler for the plugin stack.
        enabled: true

    web:
      hpa:
        enabled: true
      env:
        # -- Set google oauth 2 key. Requires posthog ee license.
        - name: SOCIAL_AUTH_GOOGLE_OAUTH2_KEY
          value:
        # -- Set google oauth 2 secret. Requires posthog ee license.
        - name: SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET
          value:
        # -- Set google oauth 2 whitelisted domains users can log in from.
        - name: SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS
          value: "compose.ai"

    # TODO May need to use this instead of web oauth settings because says it requires a posthog ee license
    saml:
      # -- Whether password-based login is disabled and users automatically redirected to SAML login. Requires SAML to be properly configured.
      enforced: false
      # -- Whether SAML should be completely disabled. If set at build time, this will also prevent SAML dependencies from being installed.
      disabled: false
      # -- Entity ID from your SAML IdP.
      # entity_id: "id-from-idp-5f9d4e-47ca-5080"
      entity_id:
      # -- Assertion Consumer Service URL from your SAML IdP.
      # acs_url: "https://mysamlidp.com/saml2"
      acs_url:
      # -- Public X509 certificate from your SAML IdP to validate SAML assertions
      # x509_cert: |
      # MIID3DCCAsSgAwIBAgIUdriHo8qmAU1I0gxsI7cFZHmna38wDQYJKoZIhvcNAQEF
      # BQAwRTEQMA4GA1UECgwHUG9zdEhvZzEVMBMGA1UECwwMT25lTG9naW4gSWRQMRow
      # GAYDVQQDDBFPbmVMb2dpbiBBY2NvdW50IDAeFw0yMTA4MTYyMTUyMzNaFw0yNjA4
      # MTYyMTUyMzNaMEUxEDAOBgNVBAoMB1Bvc3RIb2cxFTATBgNVBAsMDE9uZUxvZ2lu
      # IElkUDEaMBgGA1UEAwwRT25lTG9naW4gQWNjb3VudCAwggEiMA0GCSqGSIb3DQEB
      # AQUAA4IBDwAwggEKAoIBAQDEfUWFIU38ztF2EgijVsIbnlB8OIwkjZU8c34B9VwZ
      # BQQUSxbrkuT9AX/5O27G04TBCHFZsXRId+ABSjVo8daCPu0d38Quo9KS3V3627Nw
      # YcTYsje95lB02E/PgfiEQ6ZGCOV0P4xY9C99d26PoYTcoMT1S73jDDMOFtoD5WXG
      # ZsKqwBks1jbLkv6RYoFBlZX00aGzOXDzUXI59/0c15KR4EzgTad0t6CU7X0HZ2Qf
      # xGUiRb7hDLvgSby0SzpQpYUyYDnN9aSNYzpu1hiyIqrhQ7kZNy7LyGBz0UIuIImF
      # pF6A3bzzrR4wdacFY9U0vmqFXXcepxuT5p2UyAxwbLeDAgMBAAGjgcMwgcAwDAYD
      # VR0TAQH/BAIwADAdBgNVHQ4EFgQURLVVKanZPoXGEfYr1HmlaCEoD54wgYAGA1Ud
      # IwR5MHeAFES1VSmp2T6FxhH2K9R5pWghKA+eoUmkRzBFMRAwDgYDVQQKDAdQb3N0
      # SG9nMRUwEwYDVQQLDAxPbmVMb2dpbiBJZFAxGjAYBgNVBAMMEU9uZUxvZ2luIEFj
      # Y291bnQgghR2uIejyqYBTUjSDGwjtwVkeadrfzAOBgNVHQ8BAf8EBAMCB4AwDQYJ
      # KoZIhvcNAQEFBQADggEBALP5lhlcV8avbnVnqO7PBtlS2mVOJ2B7obm50OaJCbRh
      # t0I/dcNssWhT31/zmtNfKtrFicNImlKhdirApxpIp1WLEFY01a40GLmO6FG/WVvB
      # EzwXonWP+cP8jYQnqZ15JkuHjP3DYJuOak2GqAJAfaGO67q6IkRZzRq6UwEUgNJD
      # TlcsJAFaJDrcw07TY3mRFragdzGC7Xt/CM6r/0seY3+VBwMUMiJlvawcyQxap7om
      # EdgmQkJA8Dk6f+geI+U7jV3orkPiofBJi9K6cp5Fd9usut8jwi3GYg2wExNGbhF4
      # wlMD1LOhymQGBnTXPk+000nkBnYdqEnqXzVpDiCG1Pc=
      x509_cert:
      # -- Name of attribute that contains the permanent ID of the user in SAML assertions.
      # attr_permanent_id: "nameID"
      attr_permanent_id:
      # -- Name of attribute that contains the first name of the user in SAML assertions.
      # attr_first_name: "firstName"
      attr_first_name:
      # -- Name of attribute that contains the last name of the user in SAML assertions.
      # attr_last_name: "lastName"
      attr_last_name:
      # -- Name of attribute that contains the email of the user in SAML assertions.
      # attr_email: "email"
      attr_email:
    
    service:
      # -- PostHog service annotations.
      annotations: {}

    ingress:
      # -- Ingress handler type. Defaults to `nginx` if nginx is enabled and to `clb` on gcp.
      type: "nginx"
      hostname: "posthog.ops.cluster.compose.ai"
      secretName: "posthog-ingress-tls"
      annotations:
        cert-manager.io/cluster-issuer: cert-manager-global

    postgresql:
      persistence:
        # -- Enable persistence using PVC.
        enabled: true
        # -- PVC Storage Request for PostgreSQL volume.
        size: 10Gi

    kafka:
      persistence:
        # - Enable data persistence using PVC.
        enabled: true
        # -- PVC Storage Request for Kafka data volume.
        size: 20Gi

    clickhouse:
      persistence:
        # -- Enable data persistence using PVC.
        enabled: true
    
        # -- Use a manually managed Persistent Volume and Claim.
        #    If defined, PVC must be created manually before volume will be bound.
        #
        existingClaim: ""
    
        # -- Persistent Volume Storage Class to use.
        #    If defined, `storageClassName: <storageClass>`.
        #    If set to `storageClassName: ""`, disables dynamic provisioning.
        #    If undefined (the default) or set to `null`, no storageClassName spec is
        #    set, choosing the default provisioner.
        #
        storageClass: null
    
        # -- Persistent Volume size
        size: 20Gi

      settings:
        # Uncomment those lines if you want to enable the built-in Prometheus HTTP endpoint in ClickHouse.
        prometheus/endpoint: /metrics
        prometheus/port: 9363
        prometheus/metrics: true
        prometheus/events: true
        prometheus/asynchronous_metrics: true


      backup:
        # https://posthog.com/docs/self-host/runbook/clickhouse/backup
        # https://github.com/AlexAkulov/clickhouse-backup
        enabled: false

    ## External Object Storage configuration
    ##
    # TODO
    externalObjectStorage:
      # -- Endpoint of the external object storage. e.g. https://s3.us-east-1.amazonaws.com
      endpoint:
      # -- Host of the external object storage. Deprecated: use endpoint instead
      host:
      # -- Port of the external object storage. Deprecated: use endpoint instead
      port:
      # -- Bucket name to use.
      bucket:
      # -- Region of the bucket (for AWS).
      region:
      # -- Name of an existing Kubernetes secret object containing the `access_key_id` and `secret_access_key`. The secret has to contain the keys `root-user` and `root-password`).
      existingSecret:

    zookeeper:
      metrics:
        enabled: true

    # Instead of using these from this chart, they should be stable enough that we can use newer versions from the prometheus community helm repo
    # They use a deprecated API which makes them not possible to install on our cluster
    #prometheus-kafka-exporter:
      #enabled: true
    #prometheus-postgres-exporter:
      #enabled: true
    #prometheus-redis-exporter:
      #enabled: true
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: clickhouse-podmonitor
  namespace: posthog
  labels:
    app.kubernetes.io/part-of: compose
spec:
  podMetricsEndpoints:
    - path: /metrics
      targetPort: 9363
  namespaceSelector:
    matchNames:
      - posthog
  selector:
    matchExpressions:
      - key: clickhouse.altinity.com/app
        operator: In
        values:
          - chop
      - key: compose.ai/ignore-monitoring
        operator: DoesNotExist
        values:
          - "ignore"
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: zookeeper-podmonitor
  namespace: posthog
  labels:
    app.kubernetes.io/part-of: compose
spec:
  podMetricsEndpoints:
    - path: /metrics
      targetPort: 9141
  namespaceSelector:
    matchNames:
      - posthog
  selector:
    matchExpressions:
      - key: app.kubernetes.io/component
        operator: In
        values:
          - zookeeper
      - key: compose.ai/ignore-monitoring
        operator: DoesNotExist
        values:
          - "ignore"
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: posthog-events-podmonitor
  namespace: posthog
  labels:
    app.kubernetes.io/part-of: compose
spec:
  podMetricsEndpoints:
    - path: /metrics
      targetPort: 8001
  namespaceSelector:
    matchNames:
      - posthog
  selector:
    matchExpressions:
      - key: app
        operator: In
        values:
          - posthog
      - key: role
        operator: In
        values:
          - events
      - key: compose.ai/ignore-monitoring
        operator: DoesNotExist
        values:
          - "ignore"
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: posthog-web-podmonitor
  namespace: posthog
  labels:
    app.kubernetes.io/part-of: compose
spec:
  podMetricsEndpoints:
    - path: /metrics
      targetPort: 8001
  namespaceSelector:
    matchNames:
      - posthog
  selector:
    matchExpressions:
      - key: app
        operator: In
        values:
          - posthog
      - key: role
        operator: In
        values:
          - web
      - key: compose.ai/ignore-monitoring
        operator: DoesNotExist
        values:
          - "ignore"
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: posthog-worker-podmonitor
  namespace: posthog
  labels:
    app.kubernetes.io/part-of: compose
spec:
  podMetricsEndpoints:
    - path: /metrics
      targetPort: 8001
  namespaceSelector:
    matchNames:
      - posthog
  selector:
    matchExpressions:
      - key: app
        operator: In
        values:
          - posthog
      - key: role
        operator: In
        values:
          - worker
      - key: compose.ai/ignore-monitoring
        operator: DoesNotExist
        values:
          - "ignore"
