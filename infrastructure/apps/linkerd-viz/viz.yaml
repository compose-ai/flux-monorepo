---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
    pod-security.kubernetes.io/enforce: privileged
  annotations:
    viz.linkerd.io/external-prometheus: http://prometheus-kube-prometheus-prometheus.metrics.svc.cluster.local:9090
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU5UODZjTnNqc0k5VmtpU2hCL2JkRFV3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TXpFeE1qTXdNRE14TkRkYQpGdzB5TkRFeE1qSXdNRE14TkRkYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUR4Sng2emdraHFWeGp6anJmak1HMGQKeFNKTW9uQjBJaHFDcWZsSm5abHZsaGpNWUgvdSt4NVdGa0d5WUlsY3EzWXVBaUpDK1NFRDZhTVZ0NHJ4ZXN2RQo1ejJWL3MrSkdmWHg5L2hBVnpUaGdTQzVJMXgzem9BcmNiRG5hU3FNVW9VSG9MODNSUUcxaUVCaHJHR3Z0dE1LCkhHTlFxU1BWaUhzNVAveGtuVThnV0t2dnV1eHhwSmxPTkRKTDBPQWUrTEQ2ZWJQZmU4Z0Zqbkw2bFZTT3k5cWEKemRDNDJJTzV3VGNneGo2M2dqRFAvQy93V2dGZGN1dGREUzRDb0ZRYnNqeTRQM0NlWFh0Z1ZJM2laUVB2UHlldQpSTWIzaVNENUZSblhaSjVWMyt0dE1TUXpoNTJ6NWR6OGhrQjNmcWlhVXIwUjA4NEZGcTB5KzNmRlV6eHkrVE81CkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRRHQrS3AyTkQyY1p5dVJVWk9UZjhnbUllWEExdGtKCnJ2RjhNR2dtMFhDMnBhcmlTdFBLbGJBelExczhUMXpvSU1iSTNMbFVvVGE5WWI0UDlPWllmL0dQRTljZnZnbTYKQjNGYzllaHdtOFFqU2dRMk10czNXeklURFpjOE9RM1dDWjRqblJXUDZPeis5VmIrQmFJcGI5U1JZenQvaDd6NgplT2FkMUFqcFF4bHFucG9FOTlGVy9IbmJrbUtJN0JzUlZpdXhqOUltdHQvV3oyTkUyb3ZnUWt3NmUzMTMxYnR1Ci9XcHkrcVQyaEpjczkxb2UyYitVbk5mUnBqTkxhVHhjNHhGNnBlMEdrRGhFUXBNYWVpOHZhdkdwTXNHWHEwTlEKaURmMUJiRDVHZitOSmliNFlSUk9UTHYrVXcvTDltTXh1dTVVUHY1aXo5WU5WVEpwNHNFZ2lacSsKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOFNjZXM0SklhbGNZODQ2MzR6QnRIY1VpVEtKd2RDSWFncW41U1oyWmI1WVl6R0IvCjd2c2VWaFpCc21DSlhLdDJMZ0lpUXZraEErbWpGYmVLOFhyTHhPYzlsZjdQaVJuMThmZjRRRmMwNFlFZ3VTTmMKZDg2QUszR3c1MmtxakZLRkI2Qy9OMFVCdFloQVlheGhyN2JUQ2h4alVLa2oxWWg3T1QvOFpKMVBJRmlyNzdycwpjYVNaVGpReVM5RGdIdml3K25tejMzdklCWTV5K3BWVWpzdmFtczNRdU5pRHVjRTNJTVkrdDRJd3ovd3Y4Rm9CClhYTHJYUTB1QXFCVUc3STh1RDl3bmwxN1lGU040bVVEN3o4bnJrVEc5NGtnK1JVWjEyU2VWZC9yYlRFa000ZWQKcytYYy9JWkFkMzZvbWxLOUVkUE9CUmF0TXZ0M3hWTThjdmt6dVFJREFRQUJBb0lCQVFDWU4wQXF3S2FpOE4wZwpCMHJORGFraWJHZHRCZStEYm05YllKeW91ZUM2elh4VHJPbXoyREJhMkd1WmcxUFErYTE3OXY3WFZWZGdsOTNICi9IV29YUUU0QlZvYlRwNkRCSzc0ajdQVU1QZUJDN2V6QkwzK0pZdERZTnp3QkxMRnBlU3dYdWV6cEV3aTRLRDYKeGd0WEZVaDZqbGFsK0UxVklIUGZQQ005QXdxSitCVEQ4VFNqaWxlMU5XcUo1eUdabGIwUE9CWjBjZ3dRZXhlQgpqaktYc0J0ZGFTVVFuWXk1T1VqM0FEc0gxc212VzFQaGNCMXNBaytRYVdOcGdaYi9ja0F2UTFmWW41VElhelpyCldEWEpJUzZnR0wwQk1zTFlsMUh2NXNBOE9uWDBPWUc0ZjAzWE15d3RNcTJaT2crZGtkUEM4M0NjYTFnZ0VuckIKN2dzYzJRVjlBb0dCQVBUemY3NGFnQmhMcjJGQXRLOTllMVlUdFZqWWR3TzljZVpuUytLSWFLd2FoT3JacnJXYwpCelF2dFVnMk9KUHRmUHJmK25jU2VlTUZHb2VTYWVwS0ZWNk5JWXJOS0hRRWdBNExxbVA2VEI2eXZFczlZam1LCitsbEhCMkEzeTIyVXc0akNjcjE4V29wVWo0M0ZSa095bUYwR2FzazdHbzRXWWpoS3d0S1A4bFhyQW9HQkFQd0gKd3JNVjRQTGJQVld1QVkwd0dndEs4SUdqOFpYYndZZFVaUm5XNUhwUnl5VCsrWUJ5RUVRSDFya0Ewa241OXJHSwpnblo3a1F5N29GNXNYcFlGNlFuTTUrYitST3NXOEl2ejBzOEgzSlFaTmdJcEZxOEZDUFQ4UTBaYXdwOW9XNHlwCjNmemx5QlhqakNvRWN2Z29KY3luZlVVczAvWC90bzdMV2FIM3ZyL3JBb0dCQU9MdHJ6dkVPMFhHNEV5ZDhJYmcKSG1KSlVlbGthU1lLM1RtU0d3aGNUWFNjQU9XK0U1Qm1ZM29pZExUWW5xUFZFY010dTFHU3lWN2JmSTk2d2lydQp4VXRhUG1majF3VmNvZkhoTnRMMnNJeUVFOU0wcEFvaFNmdHB4VmlMZUNnbCtOeDdJR2VSakNPNVlXRDdFVFJvCmdhVTA2N3RQeVRNM1kzazVNYkoyN3hCUEFvR0FWZWhEU280RG5tUnkxTGk2V0tqeng3T2twVnYvcGloQklHTDUKRDBTN25xSXd6NHlGK1cxbjgvaUVEWTJsSUlndXViZlAzcGtpQ1NnUGN3QVhnYVhFR0k0YTRoYjc0UEp4emhLdgpZZGg1TEpZblhiY3B2MERGRzlTOURjYzBIZWdSaExJR05BVVRIYnJ4ZFFVTk4xOWYreEdBVnNyLytSTlA0LzZXCnIrbmx3RDhDZ1lFQXVSN1IrYTBMMFlFVHRiVU1BSCtUSzdNNmtib0ZQZHNUMnEvV0hoTXl2WUlIS2h1SHVIaHAKcXZaWWVxa2hGdWlKaDk2RGZhVlpRUlhWNTE5UWFDRUoyZFNqR21ZcG9yT3E5RHpTTDVMTURDNzVzaU1aeDI1WQpnQS9leWRtVkxya3pHbm4rb2RZcmE0ZlpKZFl6TnZDdkdTVVYxd2ZWQTJFTENkeGJSUUc0RXhvPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQU5UODZjTnNqc0k5VmtpU2hCL2JkRFV3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TXpFeE1qTXdNRE14TkRkYQpGdzB5TkRFeE1qSXdNRE14TkRkYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUR4Sng2emdraHFWeGp6anJmak1HMGQKeFNKTW9uQjBJaHFDcWZsSm5abHZsaGpNWUgvdSt4NVdGa0d5WUlsY3EzWXVBaUpDK1NFRDZhTVZ0NHJ4ZXN2RQo1ejJWL3MrSkdmWHg5L2hBVnpUaGdTQzVJMXgzem9BcmNiRG5hU3FNVW9VSG9MODNSUUcxaUVCaHJHR3Z0dE1LCkhHTlFxU1BWaUhzNVAveGtuVThnV0t2dnV1eHhwSmxPTkRKTDBPQWUrTEQ2ZWJQZmU4Z0Zqbkw2bFZTT3k5cWEKemRDNDJJTzV3VGNneGo2M2dqRFAvQy93V2dGZGN1dGREUzRDb0ZRYnNqeTRQM0NlWFh0Z1ZJM2laUVB2UHlldQpSTWIzaVNENUZSblhaSjVWMyt0dE1TUXpoNTJ6NWR6OGhrQjNmcWlhVXIwUjA4NEZGcTB5KzNmRlV6eHkrVE81CkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRRHQrS3AyTkQyY1p5dVJVWk9UZjhnbUllWEExdGtKCnJ2RjhNR2dtMFhDMnBhcmlTdFBLbGJBelExczhUMXpvSU1iSTNMbFVvVGE5WWI0UDlPWllmL0dQRTljZnZnbTYKQjNGYzllaHdtOFFqU2dRMk10czNXeklURFpjOE9RM1dDWjRqblJXUDZPeis5VmIrQmFJcGI5U1JZenQvaDd6NgplT2FkMUFqcFF4bHFucG9FOTlGVy9IbmJrbUtJN0JzUlZpdXhqOUltdHQvV3oyTkUyb3ZnUWt3NmUzMTMxYnR1Ci9XcHkrcVQyaEpjczkxb2UyYitVbk5mUnBqTkxhVHhjNHhGNnBlMEdrRGhFUXBNYWVpOHZhdkdwTXNHWHEwTlEKaURmMUJiRDVHZitOSmliNFlSUk9UTHYrVXcvTDltTXh1dTVVUHY1aXo5WU5WVEpwNHNFZ2lacSsKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.5
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm stable-2.14.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus-kube-prometheus-prometheus.metrics.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.14.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: prometheus-admin
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: metrics-api
      namespace: linkerd-viz
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.5
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 116286780c1562782a15e1eef2b81a0f509f6a302413609d695062c4913fa851
        linkerd.io/created-by: linkerd/helm stable-2.14.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.14.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUxTTUVyd3FUZEp6a1hCOTZUNFUzZDR3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TXpFeApNak13TURNeE5EaGFGdzB5TkRFeE1qSXdNRE14TkRoYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEQUw5ZTFSTFVvb3dUQ3d5VXFvUnM2aEJOdGROVGtkSGlTL1c4TjRuM2xJeE9LL3dxTm5wOWRZbmZqZ0h3SQpDU0piREFkSWROdFV2Rms1ZHF3SFpOR05zSVRkUkdlOUJZY09kU2FYUjJkd2tMV1MvNWtrQ1NyQVdQT2xyeXRUCmorTHNVMjNrWUJjc2h6ZTFyQnQzejgzYXZYb2RRNjFzZGxiRGRIVml5d05nNDc2YnA0cytZMTRNS21hNjNxb1MKb2FaSzdpTmZtb0ZUNEs3OUIvZWg3bEs4OTJQMXV5M0JGYTRTeVZEQW54ZXFJcnd2KzVGRkUzRkJuYjhpNFlTdwo3UVIrb1F0a0RDaWlIdzBKQS9ieFgxNmFnTEt0NG8zbktkSDdHTHlrMlRnWG5NVlVNYktpcTMvb3JFTm04SStQCmZpc0x4NlJhKzlDK1E4SDloSFc2TXh0dkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFmcnZ3V2NUZXczdlJwc0N5TW9nUmp1aTBjRG96dDQzZnhyT04rSlU5TEkrSXdMOFNPZ2RCUzJWaWoKdEcxOE52WnpVelQwckxNQnNyWVBzZGpaenFnc05hUzV4NHYwTFc2NTUzS25zODNhbXdvNDJHalI4OGlBN1EwcwpDK1dQQjhYeXdhNUhLa1N3KzkwaGQ2OWFBeWZzaFBPT1ZiT1FpY0p3bk5NMHhCeDJiaDRYeXZCMzZIUG50V0wyCll0ZlhaZWgyMkpORy90eWZxYll1Ym83Tk42UEhNY2Z4bnZPQjBTUXMvVkMydnVkWUUxa0QyQmlVcCtoa2xYMC8KQm1tcjBEZ0tieHFDbmFGclQzTHo4Yjk0L1ZuTzBGQWpSTlZZVWlIcXEwMmE2cVhrSG9PREFSaE1Ob0ZNalVmUApTYzB4NlBiMHZVdlJoNDNBVmFhQzlNbFR0ZnBoCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd0MvWHRVUzFLS01Fd3NNbEtxRWJPb1FUYlhUVTVIUjRrdjF2RGVKOTVTTVRpdjhLCmpaNmZYV0ozNDRCOENBa2lXd3dIU0hUYlZMeFpPWGFzQjJUUmpiQ0UzVVJudlFXSERuVW1sMGRuY0pDMWt2K1oKSkFrcXdGanpwYThyVTQvaTdGTnQ1R0FYTEljM3Rhd2JkOC9OMnIxNkhVT3RiSFpXdzNSMVlzc0RZT08rbTZlTApQbU5lRENwbXV0NnFFcUdtU3U0alg1cUJVK0N1L1FmM29lNVN2UGRqOWJzdHdSV3VFc2xRd0o4WHFpSzhML3VSClJSTnhRWjIvSXVHRXNPMEVmcUVMWkF3b29oOE5DUVAyOFY5ZW1vQ3lyZUtONXluUit4aThwTms0RjV6RlZER3kKb3F0LzZLeERadkNQajM0ckM4ZWtXdnZRdmtQQi9ZUjF1ak1iYndJREFRQUJBb0lCQVFDcmZnV055dkdjZ1ZzTwpML1JLUmRoMkxzVG5Od21Ca2l6RmZVQkxzMytEcC9rWVh0eWI0cDl5UlJ1VjltQzNDdStOTHY2UXVUVytOeE9uCkl5Mytxd2dTMXlDNEVRSkF1VjM2bUs4RzdzQnV3YkpFcWErTmFHQ3RvckpIZGpmREtQSGt6ODJQcSs4QjNPYnAKUmRwODN3RmgzeEhJYTB1bExUUGUxVnlwKzEzWVpkVWZYUndBeUZkbXpXNGFUaHl4bm5JVEFsbDZaMXk2VkZMUwpidDh4U2xSYWVuc1ZpaXAxNkxWRTFzQ29RSVhKbmlZY2JCUm5hUjhyeHJMK05mZ3pSb2J4cWd4bjRqSzVOa09SCk42b3IwNm8yUmZIN2tlb0x5Y0NRdXVQa1hnM2U3Mll4eVJzRzJCZ2xEOFN1SWl6WG1FUFVxODkzaDF1ano0MnIKVDlqNkJCbUJBb0dCQU9BU0l5bFBXaTczS3oxQmkyc3JOaVZhMTdFRTNPcjRIYmxKZC94U0ZRRTJOME5TcjBqSApPOGNzbXZrQ3U0KzZxU3F0YW4vaVVTWkxYdzZrSHhwSmUrS3BDamlpVW1xVmZHQ0o2QzhuZ09qSmQ3MHVuaDZJClU0bk9YcDVKdWtHOXBudXNqb2IyVk1KNzQra3lnUHBkb095L1pyTTRuTEdDTGZ6Unl4RzQ0dlkxQW9HQkFOdVMKbk5qZlpjLzRWQ3VjZ0pvSFQxUzhUdGhaTWl5b3UyaG1LTi9JK214VXZ3MXlFSlpSenhFVEdFRjVHbk9tTWRqNQp4RldYS1JXUnRkV3FXeE81QzVrVUQ3ajVJbFpXc3hQWUpzd0x0NCtlUVNweENDelhibHRqM29VS0V5K0VvUVo2CjlFckZpamw2NVhKZ3o5ZFhQbWtKYThlNXMwd205Q1Rlak1GM2ZDK1RBb0dBSTVXOXo4bXlZTk1RSXVKTjZlOHEKNGpQVEhXSFFVK0NqbDlGN0pLOUVkclROZ2Z1WHFzODVSeUJtWERWNjVCQ1kzUlk5VzZIdGtVOVhBVlEvUEVWLwpUemZaVDdVM3NZV2NBeGpqcnRsdk40a0hZeHdNTUgwbUJ6U25BaXhqVUIxMld4M0VaTnFxQzFqeGtROWNQR2F5CkwrY1Z3RkMxVWR1Q3dpdnZQQmxJc2lFQ2dZQkFTSTA1QlRaMmk3cUF4aUgwZGwxb2JuVWE3QW8vZnVyWEpzbWkKc3VGMkk5MkhYelN4L2FPRTJUVkp2ZDNicS9WK0U2bkNjUzNyRGF6UnNEMVg2ZDRXWkFReVlHWUlKdnZvdkdpbgpabXJJVmttMzFqM1Jld1RwSnJUMytEb2p1RTI0YXZqb2h5cnZweVpUdFRwRVRsdU1QdURhS1dqdnk1dkF5NU1qCjlRcGJsd0tCZ0dDQlVOTzM1SWtyRVU4UysvcUFiTXpGejE0dVYrVGY1Y09CUW1hV3lQQlR2dlJUQ2lTeklNQVIKT1hLMjY0TUJaanpnNHdKeXl0MmFQTjZOYUQ3ci9lOTdqaGZtODNFVUNVZlVtN0I5akNPTjF4UHZ0NDZLSTlRWgpLaFlCZXRxWTdiMldPNnh6M0E0b2FuWnlieXNvQ1hLdi8xeGcxTkdlclU2eUZ5ZGFJTTZFCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUxTTUVyd3FUZEp6a1hCOTZUNFUzZDR3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TXpFeApNak13TURNeE5EaGFGdzB5TkRFeE1qSXdNRE14TkRoYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEQUw5ZTFSTFVvb3dUQ3d5VXFvUnM2aEJOdGROVGtkSGlTL1c4TjRuM2xJeE9LL3dxTm5wOWRZbmZqZ0h3SQpDU0piREFkSWROdFV2Rms1ZHF3SFpOR05zSVRkUkdlOUJZY09kU2FYUjJkd2tMV1MvNWtrQ1NyQVdQT2xyeXRUCmorTHNVMjNrWUJjc2h6ZTFyQnQzejgzYXZYb2RRNjFzZGxiRGRIVml5d05nNDc2YnA0cytZMTRNS21hNjNxb1MKb2FaSzdpTmZtb0ZUNEs3OUIvZWg3bEs4OTJQMXV5M0JGYTRTeVZEQW54ZXFJcnd2KzVGRkUzRkJuYjhpNFlTdwo3UVIrb1F0a0RDaWlIdzBKQS9ieFgxNmFnTEt0NG8zbktkSDdHTHlrMlRnWG5NVlVNYktpcTMvb3JFTm04SStQCmZpc0x4NlJhKzlDK1E4SDloSFc2TXh0dkFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUFmcnZ3V2NUZXczdlJwc0N5TW9nUmp1aTBjRG96dDQzZnhyT04rSlU5TEkrSXdMOFNPZ2RCUzJWaWoKdEcxOE52WnpVelQwckxNQnNyWVBzZGpaenFnc05hUzV4NHYwTFc2NTUzS25zODNhbXdvNDJHalI4OGlBN1EwcwpDK1dQQjhYeXdhNUhLa1N3KzkwaGQ2OWFBeWZzaFBPT1ZiT1FpY0p3bk5NMHhCeDJiaDRYeXZCMzZIUG50V0wyCll0ZlhaZWgyMkpORy90eWZxYll1Ym83Tk42UEhNY2Z4bnZPQjBTUXMvVkMydnVkWUUxa0QyQmlVcCtoa2xYMC8KQm1tcjBEZ0tieHFDbmFGclQzTHo4Yjk0L1ZuTzBGQWpSTlZZVWlIcXEwMmE2cVhrSG9PREFSaE1Ob0ZNalVmUApTYzB4NlBiMHZVdlJoNDNBVmFhQzlNbFR0ZnBoCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 4779c0d8995ec82bd23306002387ccb5954fe7971e78d0903bce5f0bf8c2fc79
        linkerd.io/created-by: linkerd/helm stable-2.14.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.14.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
    
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.5
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.14.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
